import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import json

TOKEN = "YOUR_BOT_TOKEN"  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
DATABASE_NAME = 'tapka_data.db'

def create_connection():
    """–°—Ç–≤–æ—Ä—é—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö SQLite."""
    conn = None
    try:
        conn = sqlite3.connect(DATABASE_NAME)
        return conn
    except sqlite3.Error as e:
        print(e)
    return conn

def create_tables():
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥—É, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î."""
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            best_score INTEGER DEFAULT 0
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS leaderboard (
            user_id INTEGER PRIMARY KEY,
            score INTEGER DEFAULT 0,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )
    """)
    conn.commit()
    conn.close()

def get_best_score(user_id):
    """–û—Ç—Ä–∏–º—É—î –Ω–∞–π–∫—Ä–∞—â–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT best_score FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    conn.close()
    return row[0] if row else 0

def update_best_score(user_id, score):
    """–û–Ω–æ–≤–ª—é—î –Ω–∞–π–∫—Ä–∞—â–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö."""
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO users (user_id, best_score) VALUES (?, ?)", (user_id, score))
    conn.commit()
    conn.close()

def update_leaderboard(user_id, score):
    """–û–Ω–æ–≤–ª—é—î —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤."""
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO leaderboard (user_id, score) VALUES (?, ?)", (user_id, score))
    conn.commit()
    conn.close()

def get_leaderboard(limit=10):
    """–û—Ç—Ä–∏–º—É—î —Ç–æ–ø N –≥—Ä–∞–≤—Ü—ñ–≤ –∑ —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤."""
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT u.user_id, u.best_score FROM users u INNER JOIN leaderboard l ON u.user_id = l.user_id ORDER BY l.score DESC LIMIT ?", (limit,))
    results = cursor.fetchall()
    conn.close()
    return results

async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –∑ –≤–µ–±-–∞–ø–ª—ñ–∫–∞—Ü—ñ—ó (—Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫) —Ç–∞ –æ–Ω–æ–≤–ª—é—î —Ä–∞—Ö—É–Ω–æ–∫."""
    try:
        data = json.loads(update.message.web_app_data.data)
        score = data.get('score')
        user_id = update.effective_user.id
        if user_id is not None and score is not None:
            old_best_score = get_best_score(user_id)
            if score > old_best_score:
                update_best_score(user_id, score)
                update_leaderboard(user_id, score)
                await update.message.reply_text(f"–ù–æ–≤–∏–π —Ä–µ–∫–æ—Ä–¥! –¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {score}")
            else:
                update_leaderboard(user_id, score)
                await update.message.reply_text(f"–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {score}")
            print(f"–†–∞—Ö—É–Ω–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {score} –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        else:
            await update.message.reply_text("–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –≤–µ–±-–∞–ø–ª—ñ–∫–∞—Ü—ñ—ó.")
            print("–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –≤–µ–±-–∞–ø–ª—ñ–∫–∞—Ü—ñ—ó:", data)
    except json.JSONDecodeError:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –≤—ñ–¥ –≤–µ–±-–∞–ø–ª—ñ–∫–∞—Ü—ñ—ó.")
        print("–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON –≤—ñ–¥ –≤–µ–±-–∞–ø–ª—ñ–∫–∞—Ü—ñ—ó:", update.message.web_app_data.data)
    except Exception as e:
        print(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö –≤–µ–±-–∞–ø–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    create_tables()
    best_score = get_best_score(user_id)
    web_app_url = "https://radomir4ik26.github.io/mitit.github.io/"
    web_app_info = WebAppInfo(url=web_app_url)
    keyboard = [[InlineKeyboardButton("–í—ñ–¥–∫—Ä–∏—Ç–∏ –≥—Ä—É", web_app=web_app_info)],
                [InlineKeyboardButton("–†–µ–π—Ç–∏–Ω–≥", callback_data='leaderboard')]] # –ö–Ω–æ–ø–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥—É
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º—ñ–Ω—ñ-–≥—Ä—É!\n–¢–≤—ñ–π –Ω–∞–π–∫—Ä–∞—â–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {best_score}", reply_markup=reply_markup)

async def leaderboard_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∏–≤–æ–¥–∏—Ç—å —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤."""
    leaderboard = get_leaderboard()
    if leaderboard:
        message = "üèÜ **–¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤:** üèÜ\n"
        for i, (user_id, score) in enumerate(leaderboard):
            message += f"{i+1}. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}: {score}\n"
    else:
        message = "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π."
    await update.message.reply_text(message, parse_mode='Markdown')

async def leaderboard_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–π—Ç–∏–Ω–≥—É."""
    await leaderboard_command(update, context)

async def main() -> None:
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data))
    application.add_handler(CommandHandler("leaderboard", leaderboard_command))
    application.add_handler(CallbackQueryHandler(leaderboard_callback, pattern='^leaderboard$'))

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
    create_tables()

    await application.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())

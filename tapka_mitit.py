from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import json
import logging
import sqlite3
from datetime import datetime

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "7996923376:AAFB5dKxz5Wyfybvtny4vcChZcnJ6SGV50Q"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
def init_db():
    conn = sqlite3.connect('tapka_game.db')
    cursor = conn.cursor()
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_balances (
        user_id INTEGER PRIMARY KEY,
        balance INTEGER DEFAULT 0,
        last_updated TEXT
    )
    ''')
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó —ñ–≥–æ—Ä
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS game_history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        score INTEGER,
        timestamp TEXT,
        FOREIGN KEY (user_id) REFERENCES user_balances (user_id)
    )
    ''')
    
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_balance(user_id):
    conn = sqlite3.connect('tapka_game.db')
    cursor = conn.cursor()
    cursor.execute('SELECT balance FROM user_balances WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    
    if result:
        return result[0]
    return 0  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 0, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –∑–∞–ø–∏—Å—É –≤ –ë–î

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def update_user_balance(user_id, balance):
    conn = sqlite3.connect('tapka_game.db')
    cursor = conn.cursor()
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ INSERT OR REPLACE –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ
    cursor.execute('''
    INSERT OR REPLACE INTO user_balances (user_id, balance, last_updated) 
    VALUES (?, ?, ?)
    ''', (user_id, balance, now))
    
    conn.commit()
    conn.close()
    logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {balance}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤ —ñ—Å—Ç–æ—Ä—ñ—é —ñ–≥–æ—Ä
def add_game_history(user_id, score):
    conn = sqlite3.connect('tapka_game.db')
    cursor = conn.cursor()
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    cursor.execute('''
    INSERT INTO game_history (user_id, score, timestamp) 
    VALUES (?, ?, ?)
    ''', (user_id, score, now))
    
    conn.commit()
    conn.close()
    logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {score}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø-–≥—Ä–∞–≤—Ü—ñ–≤
def get_top_players(limit=5):
    conn = sqlite3.connect('tapka_game.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, balance FROM user_balances ORDER BY balance DESC LIMIT ?', (limit,))
    results = cursor.fetchall()
    conn.close()
    return results

async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ, –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –∑ –≤–µ–±-–∞–ø–ª—ñ–∫–∞—Ü—ñ—ó."""
    try:
        data = json.loads(update.effective_message.web_app_data.data)
        user_id = update.effective_user.id  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram
        
        if 'score' in data:
            score = data.get('score', 0)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å
            current_balance = get_user_balance(user_id)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å - –¥–æ–¥–∞—î–º–æ –æ—á–∫–∏ –∑–∞ –≥—Ä—É
            new_balance = current_balance + score
            update_user_balance(user_id, new_balance)
            
            # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –≤ —ñ—Å—Ç–æ—Ä—ñ—é —ñ–≥–æ—Ä
            add_game_history(user_id, score)
            
            await update.effective_message.reply_text(
                f"üéÆ –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"üéØ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}\n"
                f"üí∞ –í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}"
            )
        else:
            await update.effective_message.reply_text("–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –≥—Ä–∏.")
            logger.warning("–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –≥—Ä–∏: %s", data)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –≤–µ–±-–∞–ø–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
        await update.effective_message.reply_text(f"–°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    balance = get_user_balance(user_id)
    
    web_app_url = "https://radomir4ik26.github.io/mitit.github.io/"
    web_app_info = WebAppInfo(url=web_app_url)
    keyboard = [[InlineKeyboardButton("üéÆ –ì—Ä–∞—Ç–∏ –≤ —Ç–∞–ø–∫—É", web_app=web_app_info)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.effective_message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user_name}! üëã\n\n"
        f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –≥—Ä–∏ \"–¢–∞–ø–∫–∞\"!\n"
        f"üí∞ –¢–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance}\n\n"
        f"–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä—É:",
        reply_markup=reply_markup
    )

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    balance = get_user_balance(user_id)
    
    await update.effective_message.reply_text(
        f"{user_name}, —Ç–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} üí∞"
    )

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    top_players = get_top_players(10)
    
    if not top_players:
        await update.effective_message.reply_text("–ü–æ–∫–∏ –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤ —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤.")
        return
    
    message = "üèÜ –¢–û–ü –ì–†–ê–í–¶–Ü–í üèÜ\n\n"
    for i, (player_id, score) in enumerate(top_players, 1):
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            # –¶–µ –º–æ–∂–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø–æ—á–∏–Ω–∞–≤ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–æ—Ç–æ–º
            chat_member = await context.bot.get_chat(player_id)
            name = chat_member.first_name
        except:
            name = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {player_id}"
        
        message += f"{i}. {name}: {score} üí∞\n"
    
    await update.effective_message.reply_text(message)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    init_db()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫
    application = Application.builder().token(TOKEN).build()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("top", top))
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –¥–∞–Ω–∏—Ö –≤–µ–±-–∞–ø–ª—ñ–∫–∞—Ü—ñ—ó
    application.add_handler(MessageHandler(
        lambda update: update.effective_message and hasattr(update.effective_message, 'web_app_data') and update.effective_message.web_app_data is not None,
        web_app_data
    ))
    
    logger.info("–ë–æ—Ç –¥–ª—è –≥—Ä–∏ '–¢–∞–ø–∫–∞' –∑–∞–ø—É—â–µ–Ω–æ!")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
